worker_processes 2;

events {
    worker_connections  1024;
}

http {
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/MorphicLiteWeb/lua/?.lua;;";
    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "method", "request", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host", "method", "request", "status"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    }

    types {
        text/html                   html;
        text/css                    css;
        application/javascript      js;
        text/xml                    xml;
        image/jpeg                  jpeg jpg;
        image/png                   png;
        image/svg+xml               svg svgz;
    }

    default_type  application/octet-stream;

    keepalive_timeout  65;

    gzip  on;
    gzip_types text/css application/javascript text/xml image/svg+xml;

    server {
        listen *:80;
        server_name "";

        access_log logs/access.log combined;
        error_log logs/error.log error;

        log_by_lua_block {
          metric_requests:inc(1, {ngx.var.server_name, ngx.var.request_method, ngx.var.uri, ngx.var.status})
          metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name, ngx.var.request_method, ngx.var.uri, ngx.var.status})
        }

        root www;

        location ~* \.html$ {
            return 404;
        }

        location / {
            try_files $uri $uri.html =404;
        }

        location = /autoupdate/morphic-windows.appcast.xml {
            return 302 ${MORPHIC_WINDOWS_APPCAST_URL};
        }

        location = /autoupdate/morphic-windows-x86.appcast.xml {
            return 302 ${MORPHIC_WINDOWS_X86_APPCAST_URL};
        }

        location = /autoupdate/morphic-windows-x64.appcast.xml {
            return 302 ${MORPHIC_WINDOWS_X64_APPCAST_URL};
        }

        location = /autoupdate/morphic-windows-arm64.appcast.xml {
            return 302 ${MORPHIC_WINDOWS_ARM64_APPCAST_URL};
        }

        location = /autoupdate/morphic-windows-preview.appcast.xml {
            return 302 ${MORPHIC_WINDOWS_BETA_APPCAST_URL};
        }

        location = /autoupdate/morphic-macos.appcast.xml {
            return 302 ${MORPHIC_MAC_APPCAST_URL};
        }

        location = /autoupdate/morphic-macos-preview.appcast.xml {
            return 302 ${MORPHIC_MAC_BETA_APPCAST_URL};
        }

        location = /downloads/MorphicSetup.msi {
            return 302 ${MORPHIC_WINDOWS_DOWNLOAD_URL};
        }

        location = /downloads/MorphicSetup-x86.msi {
            return 302 ${MORPHIC_WINDOWS_X86_DOWNLOAD_URL};
        }

        location = /downloads/MorphicSetup-x64.msi {
            return 302 ${MORPHIC_WINDOWS_X64_DOWNLOAD_URL};
        }

        location = /downloads/MorphicSetup-arm64.msi {
            return 302 ${MORPHIC_WINDOWS_ARM64_DOWNLOAD_URL};
        }

        location = /downloads/MorphicPreviewSetup.msi {
            return 302 ${MORPHIC_WINDOWS_BETA_DOWNLOAD_URL};
        }

        location = /downloads/Morphic.pkg {
            return 302 ${MORPHIC_MAC_DOWNLOAD_URL};
        }

        location = /downloads/MorphicPreview.pkg {
            return 302 ${MORPHIC_MAC_BETA_DOWNLOAD_URL};
        }

        location = /autoupdate/morphic-windows-community.appcast.xml {
            return 302 ${MORPHIC_WINDOWS_COMMUNITY_APPCAST_URL};
        }

        location /alive {
            return 404;
        }

        location /ready {
            return 404;
        }
    }

    # utility port for things like health checks, metrics, etc...
    server {
        listen *:9180;
        server_name "";

        access_log off;
        error_log logs/error.log error;

        root www;

        location /alive {
            try_files $uri $uri.html =404;
        }

        location /ready {
            try_files $uri $uri.html =404;
        }

        location /metrics {
          content_by_lua_block {
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
          }
        }
    }
}
